generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  clerkId            String              @unique
  email              String              @unique
  firstName          String?
  lastName           String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  analytics          Analytics?
  matchedTrades      MatchedTrade[]
  openPositions      OpenPosition[]
  trades             Trade[]
  brokerConnections  BrokerConnection[]
  tradingRules       TradingRuleSet?
  chatMessages       ChatMessage[]
  Alert              Alert[]
  behavioralInsights BehavioralInsight[]
  riskAssessments    RiskAssessment[]
  PerformanceGoal    PerformanceGoal[]
}

model Trade {
  id         String   @id @default(cuid())
  tradeId    String
  userId     String
  date       DateTime
  time       String
  symbol     String
  tradeType  String
  entryPrice Float
  exitPrice  Float
  quantity   Int
  commission Float    @default(0)
  profitLoss Float
  duration   Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@index([symbol])
  @@index([userId, date])
  @@index([userId, symbol])
  @@index([tradeType])
  @@index([createdAt])
}

model Analytics {
  id                    String   @id @default(cuid())
  userId                String   @unique
  totalNetProfitLoss    Float
  grossProfit           Float
  grossLoss             Float
  totalTrades           Int
  winningTrades         Int
  losingTrades          Int
  winRate               Float
  lossRate              Float
  profitFactor          Float
  avgProfitPerWin       Float
  avgLossPerLoss        Float
  avgProfitLossPerTrade Float
  maxDrawdown           Float
  maxDrawdownPercent    Float
  avgDrawdown           Float
  longestWinStreak      Int
  longestLossStreak     Int
  profitableDays        Int
  lossDays              Int
  lastCalculated        DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MatchedTrade {
  id          String   @id @default(cuid())
  userId      String
  symbol      String
  buyDate     DateTime
  sellDate    DateTime
  buyTime     String?
  sellTime    String?
  quantity    Int
  buyPrice    Float
  sellPrice   Float
  profit      Float
  commission  Float    @default(0)
  buyTradeId  String?
  sellTradeId String?
  duration    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([symbol])
  @@index([buyDate])
  @@index([sellDate])
  @@index([userId, sellDate])
  @@index([userId, symbol])
  @@index([profit])
  @@index([sellDate, profit])
}

model OpenPosition {
  id                String   @id @default(cuid())
  userId            String
  symbol            String
  type              String
  date              DateTime
  time              String?
  price             Float
  remainingQuantity Int
  commission        Float    @default(0)
  tradeId           String?
  currentValue      Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([symbol])
  @@index([type])
  @@index([userId, symbol])
  @@index([userId, type])
  @@index([date])
}

model BrokerConnection {
  id                   String   @id @default(cuid())
  broker               String
  encryptedAccessToken String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, broker])
  @@index([userId])
  @@index([broker])
}

model TradingRuleSet {
  id              String   @id @default(cuid())
  userId          String   @unique
  maxDailyTrades  Int      @default(10)
  maxDailyLoss    Float    @default(1000.0)
  riskRewardRatio Float    @default(2.0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  role      String // "user" or "assistant"
  content   String
  timestamp DateTime @default(now())
  sessionId String? // For conversation grouping
  metadata  Json? // For additional context
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([sessionId])
}

model Alert {
  id             String   @id @default(cuid())
  userId         String
  type           String // "daily_limit", "risk_threshold", "position_alert", "market_alert", "connection_alert"
  severity       String // "low", "medium", "high", "critical"
  title          String
  message        String
  isRead         Boolean  @default(false)
  isAcknowledged Boolean  @default(false)
  metadata       Json? // For additional alert data
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, isRead])
  @@index([userId, isAcknowledged])
  @@index([type])
  @@index([severity])
}

model BehavioralInsight {
  id              String   @id @default(cuid())
  userId          String
  patternType     String // "emotional", "risk_taking", "consistency", "discipline"
  severity        String // "low", "medium", "high", "critical"
  title           String
  description     String
  evidence        Json // Supporting data for the pattern
  recommendations Json // AI-generated improvement strategies
  isAcknowledged  Boolean  @default(false)
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, patternType])
  @@index([userId, createdAt])
}

model RiskAssessment {
  id                     String   @id @default(cuid())
  userId                 String
  assessmentType         String // "position_sizing", "risk_reward", "portfolio_concentration", "volatility"
  riskScore              Float // 0-100 risk score
  recommendations        Json // AI-generated risk management recommendations
  positionSizingAnalysis Json // Position sizing analysis data
  riskRewardAnalysis     Json // Risk-reward ratio analysis
  stopLossStrategies     Json // Suggested stop-loss strategies
  createdAt              DateTime @default(now())
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, assessmentType])
  @@index([userId, createdAt])
}

model PerformanceGoal {
  id           String    @id @default(cuid())
  userId       String
  title        String
  description  String?
  category     String // "profit_target", "win_rate", "risk_management", "consistency"
  targetValue  Float
  currentValue Float     @default(0)
  startDate    DateTime  @default(now())
  targetDate   DateTime?
  isActive     Boolean   @default(true)
  progress     Float     @default(0) // 0-100 percentage
  insights     Json? // AI-generated insights about goal progress
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, category])
  @@index([userId, isActive])
  @@index([userId, createdAt])
}
