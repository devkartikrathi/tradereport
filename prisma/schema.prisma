// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(cuid())
    clerkId   String   @unique
    email     String   @unique
    firstName String?
    lastName  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    trades        Trade[]
    matchedTrades MatchedTrade[]
    openPositions OpenPosition[]
    analytics     Analytics?
}

model Trade {
    id         String   @id @default(cuid())
    tradeId    String // Original trade ID from CSV
    userId     String
    date       DateTime
    time       String
    symbol     String
    tradeType  String // Buy/Sell or Long/Short
    entryPrice Float
    exitPrice  Float
    quantity   Int
    commission Float    @default(0)
    profitLoss Float
    duration   Int? // Duration in minutes
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([date])
    @@index([symbol])
}

model Analytics {
    id     String @id @default(cuid())
    userId String @unique

    // Overall Performance
    totalNetProfitLoss Float
    grossProfit        Float
    grossLoss          Float
    totalTrades        Int
    winningTrades      Int
    losingTrades       Int
    winRate            Float
    lossRate           Float
    profitFactor       Float

    // Averages
    avgProfitPerWin       Float
    avgLossPerLoss        Float
    avgProfitLossPerTrade Float

    // Drawdowns
    maxDrawdown        Float
    maxDrawdownPercent Float
    avgDrawdown        Float

    // Streaks
    longestWinStreak  Int
    longestLossStreak Int

    // Time-based metrics
    profitableDays Int
    lossDays       Int

    // Timestamps
    lastCalculated DateTime @default(now())
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MatchedTrade {
    id          String   @id @default(cuid())
    userId      String
    symbol      String
    buyDate     DateTime
    sellDate    DateTime
    buyTime     String?
    sellTime    String?
    quantity    Int
    buyPrice    Float
    sellPrice   Float
    profit      Float
    commission  Float    @default(0)
    buyTradeId  String?
    sellTradeId String?
    duration    Int? // Duration in minutes
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([symbol])
    @@index([buyDate])
}

model OpenPosition {
    id                String   @id @default(cuid())
    userId            String
    symbol            String
    type              String // BUY or SELL
    date              DateTime
    time              String?
    price             Float
    remainingQuantity Int
    commission        Float    @default(0)
    tradeId           String?
    currentValue      Float?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([symbol])
    @@index([type])
}
