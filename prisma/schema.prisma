generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  clerkId           String             @unique
  email             String             @unique
  firstName         String?
  lastName          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  analytics         Analytics?
  matchedTrades     MatchedTrade[]
  openPositions     OpenPosition[]
  trades            Trade[]
  brokerConnections BrokerConnection[]
}

model Trade {
  id         String   @id @default(cuid())
  tradeId    String
  userId     String
  date       DateTime
  time       String
  symbol     String
  tradeType  String
  entryPrice Float
  exitPrice  Float
  quantity   Int
  commission Float    @default(0)
  profitLoss Float
  duration   Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@index([symbol])
  @@index([userId, date])
  @@index([userId, symbol])
  @@index([tradeType])
  @@index([createdAt])
}

model Analytics {
  id                    String   @id @default(cuid())
  userId                String   @unique
  totalNetProfitLoss    Float
  grossProfit           Float
  grossLoss             Float
  totalTrades           Int
  winningTrades         Int
  losingTrades          Int
  winRate               Float
  lossRate              Float
  profitFactor          Float
  avgProfitPerWin       Float
  avgLossPerLoss        Float
  avgProfitLossPerTrade Float
  maxDrawdown           Float
  maxDrawdownPercent    Float
  avgDrawdown           Float
  longestWinStreak      Int
  longestLossStreak     Int
  profitableDays        Int
  lossDays              Int
  lastCalculated        DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MatchedTrade {
  id          String   @id @default(cuid())
  userId      String
  symbol      String
  buyDate     DateTime
  sellDate    DateTime
  buyTime     String?
  sellTime    String?
  quantity    Int
  buyPrice    Float
  sellPrice   Float
  profit      Float
  commission  Float    @default(0)
  buyTradeId  String?
  sellTradeId String?
  duration    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([symbol])
  @@index([buyDate])
  @@index([sellDate])
  @@index([userId, sellDate])
  @@index([userId, symbol])
  @@index([profit])
  @@index([sellDate, profit])
}

model OpenPosition {
  id                String   @id @default(cuid())
  userId            String
  symbol            String
  type              String
  date              DateTime
  time              String?
  price             Float
  remainingQuantity Int
  commission        Float    @default(0)
  tradeId           String?
  currentValue      Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([symbol])
  @@index([type])
  @@index([userId, symbol])
  @@index([userId, type])
  @@index([date])
}

model BrokerConnection {
  id                   String   @id @default(cuid())
  broker               String
  encryptedAccessToken String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, broker])
  @@index([userId])
  @@index([broker])
}
